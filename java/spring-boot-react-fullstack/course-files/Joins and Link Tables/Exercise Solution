// 1.
@GetMapping(path = "{studentId}/courses")
public List<StudentCourse> getAllCoursesForStudent(
        @PathVariable("studentId") UUID studentId) {
    return studentService.getAllCoursesForStudent(studentId);
}

// 2.
List<StudentCourse> getAllCoursesForStudent(UUID studentId) {
    return studentDataAccessService.selectAllStudentCourses(studentId);
}

// 3.

private RowMapper<StudentCourse> mapStudentCourseFromDb() {
        return (resultSet, i) ->
                new StudentCourse(
                        UUID.fromString(resultSet.getString("student_id")),
                        UUID.fromString(resultSet.getString("course_id")),
                        resultSet.getString("name"),
                        resultSet.getString("description"),
                        resultSet.getString("department"),
                        resultSet.getString("teacher_name"),
                        resultSet.getDate("start_date").toLocalDate(),
                        resultSet.getDate("end_date").toLocalDate(),
                        Optional.ofNullable(resultSet.getString("grade"))
                                .map(Integer::parseInt)
                                .orElse(null)
                );
}

List<StudentCourse> selectAllStudentCourses(UUID studentId) {
    String sql = "" +
            "SELECT " +
            " student.student_id, " +
            " course.course_id, " +
            " course.name, " +
            " course.description," +
            " course.department," +
            " course.teacher_name," +
            " student_course.start_date, " +
            " student_course.end_date, " +
            " student_course.grade " +
            "FROM student " +
            "JOIN student_course USING (student_id) " +
            "JOIN course         USING (course_id) " +
            "WHERE student.student_id = ?";
    return jdbcTemplate.query(
            sql,
            new Object[]{studentId},
            mapStudentCourseFromDb()
    );
}